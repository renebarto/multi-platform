#include <unit-test-c++/UnitTestC++.h>

#include <crypto/DES.h>

using namespace std;

namespace Crypto {
namespace Test
{

class DESTest
    : public UnitTestCpp::TestFixture
{
public:
    virtual void SetUp();

    virtual void TearDown();
};

void DESTest::SetUp()
{
}

void DESTest::TearDown()
{
}

TEST_SUITE(crypto)
{

TEST_FIXTURE(DESTest, Construct)
{
    DES target;

    EXPECT_EQ(_("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n"), target.ToString());
}

TEST_FIXTURE(DESTest, InitializeDecryption1)
{
    DES target;
    DESKey key = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Decrypt);

    EXPECT_EQ(_("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n"), target.ToString());
}

TEST_FIXTURE(DESTest, InitializeDecryption2)
{
    DES target;
    DESKey key = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    target.Initialize(key, Direction::Decrypt);

    EXPECT_EQ(_("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n"), target.ToString());
}

TEST_FIXTURE(DESTest, InitializeDecryption3)
{
    DES target;
    DESKey key = {0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Decrypt);

    EXPECT_EQ(_("000000000100\n")
              _("000000000002\n")
              _("000000200000\n")
              _("000000002000\n")
              _("000000000000\n")
              _("000000100000\n")
              _("000000000200\n")
              _("000000800000\n")
              _("000000000010\n")
              _("000000000800\n")
              _("000000000020\n")
              _("000000001000\n")
              _("000000000008\n")
              _("000000400000\n")
              _("000000000000\n")
              _("000000040000\n"), target.ToString());
}

TEST_FIXTURE(DESTest, InitializeEncryption1)
{
    DES target;
    DESKey key = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Encrypt);

    EXPECT_EQ(_("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n")
              _("000000000000\n"), target.ToString());
}

TEST_FIXTURE(DESTest, InitializeEncryption2)
{
    DES target;
    DESKey key = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    target.Initialize(key, Direction::Encrypt);

    EXPECT_EQ(_("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n")
              _("FFFFFFFFFFFF\n"), target.ToString());
}

TEST_FIXTURE(DESTest, InitializeEncryption3)
{
    DES target;
    DESKey key = {0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Encrypt);

    EXPECT_EQ(_("000000040000\n")
              _("000000000000\n")
              _("000000400000\n")
              _("000000000008\n")
              _("000000001000\n")
              _("000000000020\n")
              _("000000000800\n")
              _("000000000010\n")
              _("000000800000\n")
              _("000000000200\n")
              _("000000100000\n")
              _("000000000000\n")
              _("000000002000\n")
              _("000000200000\n")
              _("000000000002\n")
              _("000000000100\n"), target.ToString());
}

struct TestDataDES
{
    DESKey key;
    OSAL::ByteArray dataDecrypted;
    OSAL::ByteArray dataEncrypted;
};

const vector<TestDataDES> TestVectors1 =
{
    {
        {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x95, 0xA8, 0xD7, 0x28, 0x13, 0xDA, 0xA9, 0x4D},
    },
    {
        {0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x0E, 0xEC, 0x14, 0x87, 0xDD, 0x8C, 0x26, 0xD5},
    },
    {
        {0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x7A, 0xD1, 0x6F, 0xFB, 0x79, 0xC4, 0x59, 0x26},
    },
    {
        {0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xD3, 0x74, 0x62, 0x94, 0xCA, 0x6A, 0x6C, 0xF3},
    },
    {
        {0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x80, 0x9F, 0x5F, 0x87, 0x3C, 0x1F, 0xD7, 0x61},
    },
    {
        {0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xC0, 0x2F, 0xAF, 0xFE, 0xC9, 0x89, 0xD1, 0xFC},
    },
    {
        {0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x46, 0x15, 0xAA, 0x1D, 0x33, 0xE7, 0x2F, 0x10},
    },
    {
        {0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
    {
        {0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x20, 0x55, 0x12, 0x33, 0x50, 0xC0, 0x08, 0x58},
    },
    {
        {0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xDF, 0x3B, 0x99, 0xD6, 0x57, 0x73, 0x97, 0xC8},
    },
    {
        {0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x31, 0xFE, 0x17, 0x36, 0x9B, 0x52, 0x88, 0xC9},
    },
    {
        {0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xDF, 0xDD, 0x3C, 0xC6, 0x4D, 0xAE, 0x16, 0x42},
    },
    {
        {0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x17, 0x8C, 0x83, 0xCE, 0x2B, 0x39, 0x9D, 0x94},
    },
    {
        {0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x50, 0xF6, 0x36, 0x32, 0x4A, 0x9B, 0x7F, 0x80},
    },
    {
        {0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xA8, 0x46, 0x8E, 0xE3, 0xBC, 0x18, 0xF0, 0x6D},
    },
    {
        {0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
    {
        {0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xA2, 0xDC, 0x9E, 0x92, 0xFD, 0x3C, 0xDE, 0x92},
    },
    {
        {0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xCA, 0xC0, 0x9F, 0x79, 0x7D, 0x03, 0x12, 0x87},
    },
    {
        {0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x90, 0xBA, 0x68, 0x0B, 0x22, 0xAE, 0xB5, 0x25},
    },
    {
        {0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xCE, 0x7A, 0x24, 0xF3, 0x50, 0xE2, 0x80, 0xB6},
    },
    {
        {0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x88, 0x2B, 0xFF, 0x0A, 0xA0, 0x1A, 0x0B, 0x87},
    },
    {
        {0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x25, 0x61, 0x02, 0x88, 0x92, 0x45, 0x11, 0xC2},
    },
    {
        {0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xC7, 0x15, 0x16, 0xC2, 0x9C, 0x75, 0xD1, 0x70},
    },
    {
        {0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
    {
        {0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x51, 0x99, 0xC2, 0x9A, 0x52, 0xC9, 0xF0, 0x59},
    },
    {
        {0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xC2, 0x2F, 0x0A, 0x29, 0x4A, 0x71, 0xF2, 0x9F},
    },
    {
        {0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xEE, 0x37, 0x14, 0x83, 0x71, 0x4C, 0x02, 0xEA},
    },
    {
        {0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xA8, 0x1F, 0xBD, 0x44, 0x8F, 0x9E, 0x52, 0x2F},
    },
    {
        {0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x4F, 0x64, 0x4C, 0x92, 0xE1, 0x92, 0xDF, 0xED},
    },
    {
        {0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x1A, 0xFA, 0x9A, 0x66, 0xA6, 0xDF, 0x92, 0xAE},
    },
    {
        {0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xB3, 0xC1, 0xCC, 0x71, 0x5C, 0xB8, 0x79, 0xD8},
    },
    {
        {0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x19, 0xD0, 0x32, 0xE6, 0x4A, 0xB0, 0xBD, 0x8B},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x3C, 0xFA, 0xA7, 0xA7, 0xDC, 0x87, 0x20, 0xDC},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xB7, 0x26, 0x5F, 0x7F, 0x44, 0x7A, 0xC6, 0xF3},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x9D, 0xB7, 0x3B, 0x3C, 0x0D, 0x16, 0x3F, 0x54},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x81, 0x81, 0xB6, 0x5B, 0xAB, 0xF4, 0xA9, 0x75},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x93, 0xC9, 0xB6, 0x40, 0x42, 0xEA, 0xA2, 0x40},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x55, 0x70, 0x53, 0x08, 0x29, 0x70, 0x55, 0x92},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x86, 0x38, 0x80, 0x9E, 0x87, 0x87, 0x87, 0xA0},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x41, 0xB9, 0xA7, 0x9A, 0xF7, 0x9A, 0xC2, 0x08},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x7A, 0x9B, 0xE4, 0x2F, 0x20, 0x09, 0xA8, 0x92},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x29, 0x03, 0x8D, 0x56, 0xBA, 0x6D, 0x27, 0x45},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x54, 0x95, 0xC6, 0xAB, 0xF1, 0xE5, 0xDF, 0x51},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xAE, 0x13, 0xDB, 0xD5, 0x61, 0x48, 0x89, 0x33},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x02, 0x4D, 0x1F, 0xFA, 0x89, 0x04, 0xE3, 0x89},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xD1, 0x39, 0x97, 0x12, 0xF9, 0x9B, 0xF0, 0x2E},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x14, 0xC1, 0xD7, 0xC1, 0xCF, 0xFE, 0xC7, 0x9E},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x1D, 0xE5, 0x27, 0x9D, 0xAE, 0x3B, 0xED, 0x6F},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xE9, 0x41, 0xA3, 0x3F, 0x85, 0x50, 0x13, 0x03},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xDA, 0x99, 0xDB, 0xBC, 0x9A, 0x03, 0xF3, 0x79},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xB7, 0xFC, 0x92, 0xF9, 0x1D, 0x8E, 0x92, 0xE9},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xAE, 0x8E, 0x5C, 0xAA, 0x3C, 0xA0, 0x4E, 0x85},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x9C, 0xC6, 0x2D, 0xF4, 0x3B, 0x6E, 0xED, 0x74},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xD8, 0x63, 0xDB, 0xB5, 0xC5, 0x9A, 0x91, 0xA0},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xA1, 0xAB, 0x21, 0x90, 0x54, 0x5B, 0x91, 0xD7},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x08, 0x75, 0x04, 0x1E, 0x64, 0xC5, 0x70, 0xF7},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x5A, 0x59, 0x45, 0x28, 0xBE, 0xBE, 0xF1, 0xCC},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0xFC, 0xDB, 0x32, 0x91, 0xDE, 0x21, 0xF0, 0xC0},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x86, 0x9E, 0xFD, 0x7F, 0x9F, 0x26, 0x5A, 0x09},
    },
    {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x8C, 0xA6, 0x4D, 0xE9, 0xC1, 0xB1, 0x23, 0xA7},
    },
};

TEST_FIXTURE(DESTest, Process1)
{
    DES target;
    for (auto testVector : TestVectors1)
    {
        DESKey key;
        memcpy(key, testVector.key, DESKeySize);
        OSAL::ByteArray dataIn = testVector.dataDecrypted;
        OSAL::ByteArray dataEncrypted(testVector.dataEncrypted.Size());
        OSAL::ByteArray dataDecrypted(testVector.dataDecrypted.Size());
        OSAL::ByteArray referenceEncrypted = testVector.dataEncrypted;
        OSAL::ByteArray referenceDecrypted = testVector.dataDecrypted;
        target.Initialize(key, Direction::Encrypt);
        target.Process(dataIn, dataEncrypted);
        EXPECT_EQ(referenceEncrypted, dataEncrypted);
        target.Initialize(key, Direction::Decrypt);
        target.Process(dataEncrypted, dataDecrypted);
        EXPECT_EQ(referenceDecrypted, dataDecrypted);
    }
}

const vector<TestDataDES> TestVectors2 =
{
    {
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        },
        {
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        },
        {
            0x95, 0xF8, 0xA5, 0xE5, 0xDD, 0x31, 0xD9, 0x00,
            0xDD, 0x7F, 0x12, 0x1C, 0xA5, 0x01, 0x56, 0x19,
            0x2E, 0x86, 0x53, 0x10, 0x4F, 0x38, 0x34, 0xEA,
            0x4B, 0xD3, 0x88, 0xFF, 0x6C, 0xD8, 0x1D, 0x4F,
            0x20, 0xB9, 0xE7, 0x67, 0xB2, 0xFB, 0x14, 0x56,
            0x55, 0x57, 0x93, 0x80, 0xD7, 0x71, 0x38, 0xEF,
            0x6C, 0xC5, 0xDE, 0xFA, 0xAF, 0x04, 0x51, 0x2F,
            0x0D, 0x9F, 0x27, 0x9B, 0xA5, 0xD8, 0x72, 0x60,
            0xD9, 0x03, 0x1B, 0x02, 0x71, 0xBD, 0x5A, 0x0A,
            0x42, 0x42, 0x50, 0xB3, 0x7C, 0x3D, 0xD9, 0x51,
            0xB8, 0x06, 0x1B, 0x7E, 0xCD, 0x9A, 0x21, 0xE5,
            0xF1, 0x5D, 0x0F, 0x28, 0x6B, 0x65, 0xBD, 0x28,
            0xAD, 0xD0, 0xCC, 0x8D, 0x6E, 0x5D, 0xEB, 0xA1,
            0xE6, 0xD5, 0xF8, 0x27, 0x52, 0xAD, 0x63, 0xD1,
            0xEC, 0xBF, 0xE3, 0xBD, 0x3F, 0x59, 0x1A, 0x5E,
            0xF3, 0x56, 0x83, 0x43, 0x79, 0xD1, 0x65, 0xCD,
            0x2B, 0x9F, 0x98, 0x2F, 0x20, 0x03, 0x7F, 0xA9,
            0x88, 0x9D, 0xE0, 0x68, 0xA1, 0x6F, 0x0B, 0xE6,
            0xE1, 0x9E, 0x27, 0x5D, 0x84, 0x6A, 0x12, 0x98,
            0x32, 0x9A, 0x8E, 0xD5, 0x23, 0xD7, 0x1A, 0xEC,
            0xE7, 0xFC, 0xE2, 0x25, 0x57, 0xD2, 0x3C, 0x97,
            0x12, 0xA9, 0xF5, 0x81, 0x7F, 0xF2, 0xD6, 0x5D,
            0xA4, 0x84, 0xC3, 0xAD, 0x38, 0xDC, 0x9C, 0x19,
            0xFB, 0xE0, 0x0A, 0x8A, 0x1E, 0xF8, 0xAD, 0x72,
            0x75, 0x0D, 0x07, 0x94, 0x07, 0x52, 0x13, 0x63,
            0x64, 0xFE, 0xED, 0x9C, 0x72, 0x4C, 0x2F, 0xAF,
            0xF0, 0x2B, 0x26, 0x3B, 0x32, 0x8E, 0x2B, 0x60,
            0x9D, 0x64, 0x55, 0x5A, 0x9A, 0x10, 0xB8, 0x52,
            0xD1, 0x06, 0xFF, 0x0B, 0xED, 0x52, 0x55, 0xD7,
            0xE1, 0x65, 0x2C, 0x6B, 0x13, 0x8C, 0x64, 0xA5,
            0xE4, 0x28, 0x58, 0x11, 0x86, 0xEC, 0x8F, 0x46,
            0xAE, 0xB5, 0xF5, 0xED, 0xE2, 0x2D, 0x1A, 0x36,
            0xE9, 0x43, 0xD7, 0x56, 0x8A, 0xEC, 0x0C, 0x5C,
            0xDF, 0x98, 0xC8, 0x27, 0x6F, 0x54, 0xB0, 0x4B,
            0xB1, 0x60, 0xE4, 0x68, 0x0F, 0x6C, 0x69, 0x6F,
            0xFA, 0x07, 0x52, 0xB0, 0x7D, 0x9C, 0x4A, 0xB8,
            0xCA, 0x3A, 0x2B, 0x03, 0x6D, 0xBC, 0x85, 0x02,
            0x5E, 0x09, 0x05, 0x51, 0x7B, 0xB5, 0x9B, 0xCF,
            0x81, 0x4E, 0xEB, 0x3B, 0x91, 0xD9, 0x07, 0x26,
            0x4D, 0x49, 0xDB, 0x15, 0x32, 0x91, 0x9C, 0x9F,
            0x25, 0xEB, 0x5F, 0xC3, 0xF8, 0xCF, 0x06, 0x21,
            0xAB, 0x6A, 0x20, 0xC0, 0x62, 0x0D, 0x1C, 0x6F,
            0x79, 0xE9, 0x0D, 0xBC, 0x98, 0xF9, 0x2C, 0xCA,
            0x86, 0x6E, 0xCE, 0xDD, 0x80, 0x72, 0xBB, 0x0E,
            0x8B, 0x54, 0x53, 0x6F, 0x2F, 0x3E, 0x64, 0xA8,
            0xEA, 0x51, 0xD3, 0x97, 0x55, 0x95, 0xB8, 0x6B,
            0xCA, 0xFF, 0xC6, 0xAC, 0x45, 0x42, 0xDE, 0x31,
            0x8D, 0xD4, 0x5A, 0x2D, 0xDF, 0x90, 0x79, 0x6C,
            0x10, 0x29, 0xD5, 0x5E, 0x88, 0x0E, 0xC2, 0xD0,
            0x5D, 0x86, 0xCB, 0x23, 0x63, 0x9D, 0xBE, 0xA9,
            0x1D, 0x1C, 0xA8, 0x53, 0xAE, 0x7C, 0x0C, 0x5F,
            0xCE, 0x33, 0x23, 0x29, 0x24, 0x8F, 0x32, 0x28,
            0x84, 0x05, 0xD1, 0xAB, 0xE2, 0x4F, 0xB9, 0x42,
            0xE6, 0x43, 0xD7, 0x80, 0x90, 0xCA, 0x42, 0x07,
            0x48, 0x22, 0x1B, 0x99, 0x37, 0x74, 0x8A, 0x23,
            0xDD, 0x7C, 0x0B, 0xBD, 0x61, 0xFA, 0xFD, 0x54,
            0x2F, 0xBC, 0x29, 0x1A, 0x57, 0x0D, 0xB5, 0xC4,
            0xE0, 0x7C, 0x30, 0xD7, 0xE4, 0xE2, 0x6E, 0x12,
            0x09, 0x53, 0xE2, 0x25, 0x8E, 0x8E, 0x90, 0xA1,
            0x5B, 0x71, 0x1B, 0xC4, 0xCE, 0xEB, 0xF2, 0xEE,
            0xCC, 0x08, 0x3F, 0x1E, 0x6D, 0x9E, 0x85, 0xF6,
            0xD2, 0xFD, 0x88, 0x67, 0xD5, 0x0D, 0x2D, 0xFE,
            0x06, 0xE7, 0xEA, 0x22, 0xCE, 0x92, 0x70, 0x8F,
            0x16, 0x6B, 0x40, 0xB4, 0x4A, 0xBA, 0x4B, 0xD6,
        },
    },
    {
        {
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF
        },
        {
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xE7
        },
        {
            0xC9, 0x57, 0x44, 0x25, 0x6A, 0x5E, 0xD3, 0x1D
        },
    },
    {
        {
            0x13, 0x34, 0x57, 0x79, 0x9B, 0xBC, 0xDF, 0xF1
        },
        {
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF
        },
        {
            0x85, 0xE8, 0x13, 0x54, 0x0F, 0x0A, 0xB4, 0x05
        },
    },
};

TEST_FIXTURE(DESTest, Process2)
{
    DES target;
    for (auto testVector : TestVectors2)
    {
        DESKey key;
        memcpy(key, testVector.key, DESKeySize);
        OSAL::ByteArray dataIn = testVector.dataDecrypted;
        OSAL::ByteArray dataEncrypted(testVector.dataEncrypted.Size());
        OSAL::ByteArray dataDecrypted(testVector.dataDecrypted.Size());
        OSAL::ByteArray referenceEncrypted = testVector.dataEncrypted;
        OSAL::ByteArray referenceDecrypted = testVector.dataDecrypted;
        target.Initialize(key, Direction::Encrypt);
        target.Process(dataIn, dataEncrypted);
        EXPECT_EQ(referenceEncrypted, dataEncrypted);
        target.Initialize(key, Direction::Decrypt);
        target.Process(dataEncrypted, dataDecrypted);
        EXPECT_EQ(referenceDecrypted, dataDecrypted);
    }
}

class TripleDESTest
    : public UnitTestCpp::TestFixture
{
public:
    virtual void SetUp();

    virtual void TearDown();
};

void TripleDESTest::SetUp()
{
}

void TripleDESTest::TearDown()
{
}

TEST_FIXTURE(TripleDESTest, Construct)
{
    TripleDES target;

    EXPECT_EQ("BlockCipher 1: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 2: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 3: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n", target.ToString());
}

TEST_FIXTURE(TripleDESTest, InitializeDecryption1)
{
    TripleDES target;
    TripleDESKey key = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Decrypt);

    EXPECT_EQ("BlockCipher 1: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 2: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 3: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n", target.ToString());
}

TEST_FIXTURE(TripleDESTest, InitializeDecryption2)
{
    TripleDES target;
    TripleDESKey key = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    target.Initialize(key, Direction::Decrypt);

    EXPECT_EQ("BlockCipher 1: FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n\n"
              "BlockCipher 2: FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n\n"
              "BlockCipher 3: FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n\n", target.ToString());
}

TEST_FIXTURE(TripleDESTest, InitializeDecryption3)
{
    TripleDES target;
    TripleDESKey key = {0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Decrypt);

    EXPECT_EQ("BlockCipher 1: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 2: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 3: 000000000100\n"
                             "000000000002\n"
                             "000000200000\n"
                             "000000002000\n"
                             "000000000000\n"
                             "000000100000\n"
                             "000000000200\n"
                             "000000800000\n"
                             "000000000010\n"
                             "000000000800\n"
                             "000000000020\n"
                             "000000001000\n"
                             "000000000008\n"
                             "000000400000\n"
                             "000000000000\n"
                             "000000040000\n\n", target.ToString());
}

TEST_FIXTURE(TripleDESTest, InitializeEncryption1)
{
    TripleDES target;
    TripleDESKey key = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Encrypt);

    EXPECT_EQ("BlockCipher 1: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 2: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 3: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n", target.ToString());
}

TEST_FIXTURE(TripleDESTest, InitializeEncryption2)
{
    TripleDES target;
    TripleDESKey key = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
    target.Initialize(key, Direction::Encrypt);

    EXPECT_EQ("BlockCipher 1: FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n\n"
              "BlockCipher 2: FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n\n"
              "BlockCipher 3: FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n"
                             "FFFFFFFFFFFF\n\n", target.ToString());
}

TEST_FIXTURE(TripleDESTest, InitializeEncryption3)
{
    TripleDES target;
    TripleDESKey key = {0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    target.Initialize(key, Direction::Encrypt);

    EXPECT_EQ("BlockCipher 1: 000000040000\n"
                             "000000000000\n"
                             "000000400000\n"
                             "000000000008\n"
                             "000000001000\n"
                             "000000000020\n"
                             "000000000800\n"
                             "000000000010\n"
                             "000000800000\n"
                             "000000000200\n"
                             "000000100000\n"
                             "000000000000\n"
                             "000000002000\n"
                             "000000200000\n"
                             "000000000002\n"
                             "000000000100\n\n"
              "BlockCipher 2: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n"
              "BlockCipher 3: 000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n"
                             "000000000000\n\n", target.ToString());
}

struct TestDataTripleDES
{
    TripleDESKey key;
    OSAL::ByteArray dataDecrypted;
    OSAL::ByteArray dataEncrypted;
};

const vector<TestDataTripleDES> TestVectorsTripleDES =
{
    {
        {
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        },
        {
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xE7,
        },
        {
            0xC9, 0x57, 0x44, 0x25, 0x6A, 0x5E, 0xD3, 0x1D,
        },
    },
    {
        {
            0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
            0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01,
            0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23,
        },
        {
            0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x66, 0x63,
        },
        {
            0xA8, 0x26, 0xFD, 0x8C, 0xE5, 0x3B, 0x85, 0x5F,
        },
    },
};

TEST_FIXTURE(TripleDESTest, Process)
{
    TripleDES target;
    for (auto testVector : TestVectorsTripleDES)
    {
        TripleDESKey key;
        memcpy(key, testVector.key, TripleDESKeySize);
        OSAL::ByteArray dataIn = testVector.dataDecrypted;
        OSAL::ByteArray dataEncrypted(testVector.dataEncrypted.Size());
        OSAL::ByteArray dataDecrypted(testVector.dataDecrypted.Size());
        OSAL::ByteArray referenceEncrypted = testVector.dataEncrypted;
        OSAL::ByteArray referenceDecrypted = testVector.dataDecrypted;
        target.Initialize(key, Direction::Encrypt);
        target.Process(dataIn, dataEncrypted);
        EXPECT_EQ(referenceEncrypted, dataEncrypted);
        target.Initialize(key, Direction::Decrypt);
        target.Process(dataEncrypted, dataDecrypted);
        EXPECT_EQ(referenceDecrypted, dataDecrypted);
    }
}

} // TEST_SUITE(crypto)

} // namespace Test
} // namespace Crypto
